from django.db import models
from django.contrib.postgres import fields as pg_fields

from .concept import Concept
from .image import Image
from .utils import TimeMixin
#



"""

Annotation
{
  concept: 'fafsd',
  data: {}
  
  time_created: '',
  time_modified: '',
  
  user: None,
  model: None,
  
  is_autogenerated: False,
  verification_status: True|False|None,
  
  score: .6,
  confidence: .6  # is this useful? 
}


ImageAnnotation
{
  id: 'time_uuid',
  image: 'id',
  concept: 'fafsd',
  data: {
    bounding_box: [{x: 0, y: 30, width: 3, height: 4, is_many: True}],
    keypoints: [],
    polygon: [],
    mask: [],
    caption: '',
  }
  
  time_created: '',
  time_modified: '',
  
  user: None,
  model: None,
  
  is_autogenerated: False,
  verification_status: True|False|None,
  
  score: .6,
  confidence: .6  # is this useful? 
}


TextAnnotation
{
  document: 'doc_id,
  concept: 'fafsd',
  data: {
    spans: [
      {
        start: 0,
        end: 5,
        is_word: True,
        part_of_speech: 'Noun',
        concept: 'concept_id'
      }
    ]
  }
  
  time_created: '',
  time_modified: '',
  
  user: None,
  model: None,
  
  is_autogenerated: False,
  
  verification_status: True|False|null,
  verification_mode: 'HUMAN|WEAK|MODEL|DATA',
  
  score: .6,
  confidence: .6  # is this useful? 
}

"""

class Annotation(TimeMixin, models.Model):
  concept = models.ForeignKey(
    Concept,
    on_delete=models.CASCADE,
    null=True,
    blank=True)

  data = pg_fields.JSONField()
  confidence = models.FloatField(default=None, blank=True, null=True)
  source = models.CharField(max_length=128)

  class Meta:
    abstract = True


class ImageAnnotation(Annotation):
  image = models.ForeignKey(Image, on_delete=models.CASCADE)




class BoundingBox(ImageAnnotation):
  class Meta:
    proxy = True


class Keypoints(ImageAnnotation):
  class Meta:
    proxy = True


class Polygon(ImageAnnotation):
  class Meta:
    proxy = True


class SegmentationMask(ImageAnnotation):
  class Meta:
    proxy = True

