from django.db import models
from django.contrib.postgres import fields as pg_fields

from ..concept import Concept
from ..image import Image
# from ..document import Document
from ..utils import TimeMixin, VerificationMixin, SourceMixin

"""

Annotation
{
  concept: 'fafsd',
  data: {}

  time_created: '',
  time_modified: '',

  user: None,
  model: None,

  is_autogenerated: False,
  verification_status: True|False|None,

  score: .6,
  confidence: .6  # is this useful? 
}


ImageAnnotation
{
  id: 'time_uuid',
  image: 'id',
  concept: 'fafsd',
  data: {
    bounding_box: [{x: 0, y: 30, width: 3, height: 4, is_many: True}],
    keypoints: [],
    polygon: [],
    mask: [],
    caption: '',
    text: 'fsdafsdfas'
  }

  time_created: '',
  time_modified: '',

  user: None,
  model: None,

  is_autogenerated: False,
  verification_status: True|False|None,

  score: .6,
  confidence: .6  # is this useful? 
}


TextAnnotation
{
  document: 'doc_id,
  concept: 'fafsd',
  data: {
    spans: [
      {
        start: 0,
        end: 5,
        is_word: True,
        part_of_speech: 'Noun',
        concept: 'concept_id'
      }
    ]
  }

  time_created: '',
  time_modified: '',

  user: None,
  model: None,

  is_autogenerated: False,

  verification_status: True|False|null,
  verification_mode: 'HUMAN|WEAK|MODEL|DATA',

  score: .6,
  confidence: .6  # is this useful? 
}

"""


class Annotation(
  TimeMixin,
  SourceMixin,
  VerificationMixin,
  models.Model
):
  concept = models.ForeignKey(
    Concept, on_delete=models.CASCADE, null=True, blank=True
  )

  data = pg_fields.JSONField(
    default=dict,
    blank=True,
    help_text='dict containing serialized annotations'
  )
  # meta = pg_fields.JSONField()


  score = models.FloatField(default=None, blank=True, null=True)


  class Meta:
    abstract = True


#
# class AnnotationType(models.Model):
#   name = models.CharField(max_length=32, primary_key=True)
#   description = models.TextField(blank=True)
#   schema = pg_fields.JSONField(
#     help_text='json schema for the annotation type encoding',
#     null=True,
#     blank=True,
#     default=dict
#   )



# class DocumentAnnotation(Annotation):
#   document = models.ForeignKey(
#     Document, on_delete=models.CASCADE, related_name='annotations'
#   )
#
#
# class VideoAnnotation(Annotation):
#   pass


# class BoundingBox(ImageAnnotation):
#
#   class Meta:
#     proxy = True
#
#
# class Keypoints(ImageAnnotation):
#
#   class Meta:
#     proxy = True
#
#
# class Polygon(ImageAnnotation):
#
#   class Meta:
#     proxy = True
#
#
# class SegmentationMask(ImageAnnotation):
#
#   class Meta:
#     proxy = True
#
#
# class TextAnnotation(ImageAnnotation):
#
#   class Meta:
#     proxy = True

# image = Image('/fafsdf/afsdfsa/saf.jpeg')
#
# outputs = model(image.pillow)
#
# me = ''
#
# image.annotations.filter(type='text', concept='pizza')
# image.annotations.add(
#   text='nutrition facts', concept='nutrition_label_text', user=me
# )
#
# image.annotate(text='pizza', bounding_box=[[123, 31]])
# image.suggest(text='pzza')
#
# image.suggestions.filter(type='text')
#
# image.model_outputs.filter()
