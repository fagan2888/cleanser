# Generated by Django 2.2a1 on 2019-03-09 22:51

import cleanser.core.models.user
import cleanser.core.models.utils
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Concept',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64)),
                ('synonyms', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), size=None)),
                ('description', models.TextField()),
                ('props', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
            ],
            options={
                'db_table': 'concept',
            },
            bases=(cleanser.core.models.utils.TimeMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ConceptType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=4)),
                ('validate_schema', models.BooleanField(blank=True, default=True)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='JSON Schema for validating concept props', null=True)),
            ],
            options={
                'db_table': 'concept_type',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('hash', models.CharField(blank=True, max_length=64, null=True)),
            ],
            options={
                'db_table': 'document',
            },
            bases=(cleanser.core.models.utils.TimeMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ObjectType',
            fields=[
                ('name', models.CharField(editable=False, max_length=16, primary_key=True, serialize=False)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='JSON Schema for validation', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('slug', models.SlugField(blank=True, max_length=32, null=True, unique=True)),
                ('name', models.CharField(max_length=32)),
            ],
            options={
                'db_table': 'project',
            },
            bases=(cleanser.core.models.utils.OwnedMixin, cleanser.core.models.utils.TimeMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Object',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.ObjectType')),
            ],
            options={
                'db_table': 'object',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=128, verbose_name='full name')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='email address')),
                ('username', models.CharField(blank=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='3-32 characters. Letters, digits _ or . only.', max_length=32, null=True, unique=True, validators=[core.models.user.UsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('meta', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Extra data about the user')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'user',
            },
            managers=[
                ('objects', core.models.user.UserManagerWithOptionalUsername()),
            ],
        ),
        migrations.CreateModel(
            name='HTMLDocument',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.document',),
        ),
        migrations.CreateModel(
            name='JSONDocument',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.document',),
        ),
        migrations.CreateModel(
            name='MarkdownDocument',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.document',),
        ),
        migrations.CreateModel(
            name='TextDocument',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.document',),
        ),
    ]
